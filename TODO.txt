- olf-lastgen command to complement olf-lastrun, but instead printing/copying the path
  to the last generated config (that might still be waiting on the "Press Enter..."
  prompt) (or maybe it should specifically get the config of what is waiting on enter?
  checking there's only one such thing?)

- CLI entrypoints for printing conf (currently just all OLFACTOMETER_* env vars,
  *_DEBUG, *_DEFAULT_HARDWARE, and *_HARDWARE_DIR)
  - maybe also means of (+CLI for) setting beyond env vars?

  - add config option (could just start w/ env var) for directory to always write
    outputs to

- add script (/ option to olf-upload [/ "olf -u ..."] command) to store the
  hardware definition in the non-volatile memory of the arduino
  (just do when uploading the code? or would it make sense to upload this in a
  second step and store it in some other nonvolatile memory?)

- how to organize thing such that it's actually easy to compose this with
  arbitrary scripts to specify trials structures? i'm feeling like i might not
  want to try to anticipate all ways of representing trials in here... not sure.
  - maybe accept a python file in place of yaml, which must follow a certain
    format (function / variable with a certain name? some less hacky way?)
    that outputs either YAML or the pre-serialization equivalent
    - would i want to support certain types of inputs to these sorts of
      functions?

- write scripts that can be used with another arduino / DAQ board to verify that
  parts of this are working, such as:
  - arduino script that detects which pins are high (connect pins 1:1) and
    reports
  - script that interprets DAQ signals to measure timing and check

- add something to do all install steps on clone?
  + do i need to also clone that submodule? probably, right?

- arduino emulation for on-host integration tests?

- implement some stuff to assist manual testing
  - pulse valve at a configurable duty cycle / on off pulse widths until
    manually advanced? or switch between them (all avail pins) at some
    configurable rate?

  - if getting input from flow meters, and the valves can be switched so that no
    flow is allowed through one of the flow meters, could probably read the flow
    as a test and switch valves individually to check they allow flow

    - this + knowing pins are all driving different valves seems like a pretty
      good guarantee everything is wired correctly + the valves are working

- !!! add ability to restart from wherever, in case something went wrong!

- compare message / code size (if even available) / deserialization time of:
  - protobuf (using nanopb, probably)
  - msgpack
  - flatbuffers
  - capnproto
  - the json library will uses
  - ROS? (only if it seems clear how to just use their serialization /
    deserialization stuff, without commiting too much else to the ecosystem,
    particularly on the uC code size front...)
  - python struct? maybe defeats the purpose...
  - are there any libraries that support small types like python struct can?

- run arduino code through valgrid (and setup olf-upload flags for that) and any
  other useful detectors of potential code problems

- in pulse_timing case (or if i modify follow_hardware_timing==True case to have
  a time estimate for each, or if i estimate during experiment) print time
  experiment will take (or estimate of it)
  - + in follow_* case, just time how long it took
  - + in both cases, also report how long after it finished ctrl c was pressed
  - (at this point maybe just actually exit in python though, rather than
    prompting user to press ctrl-C? both require parsing finished basically...)

- !!!!! have python send an abort command atexit (or if i implement olfactometer
  as context manager, in cleanup portion of that). i want to be able to ctrl-C
  stuff without having it continue delivering odors!

- !!!! ensure that hardware pulses beyond end don't trigger anything until
  python actual initaites again (in follow_* case). i feel like i saw one case
  2020-08-17 where that was not the case.

- print something clarify whether "trial: ..." status prints come at the
  beginning / end of trial or where. change if necessary depending on whether
  follow_* is true

- !!!! timeout on / after "Connected" step, to get timely err if uC code isn't
  uploaded (also maybe color Connected orange and / or at least Ready green?)
  (or automatically upload if timeout passes? to not forget -u?)

- make some canonical path (env var modifiable) for files describing
  configuration of each olfactometer (~each rig, if 1:1), assuming hardware is
  allowed to vary (which, let's be real, it will)

- compile a separate docker image that just has the firmware all precompiled,
  to not need the size of the arduino toolchain(s)
  - and add entrypoint in current one so different toolchains can be installed,
    via the arduino-cli stuff? just provide access to arduino-cli?
    (might want persistent storage for some of that stuff though...)

