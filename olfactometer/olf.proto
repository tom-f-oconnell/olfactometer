
// Not including any representation of default pin states for now. Assuming
// everything defaults to LOW, for simplicity.

// And while I might want to implement in a way that lets people change the
// pulse length and stuff on the fly later, now I'll also make the assumption
// that all pulses are the same length, with equal timing.

syntax = 'proto3';

message PulseTiming {
    uint32 pre_pulse_us = 1;
    uint32 pulse_us = 2;
    uint32 post_pulse_us = 3;
    // TODO cf w/ PulseControl implementation below
    //optional bool follow_hardware_timing = 4;
}

// TODO maybe also pass expected pulse sizes + tolerances in here, so they can
// be measured and the arduino can err if there is a mismatch?
// could implment arbitrary trigger pin like this
// (and just go into err state if digitalPinToInterrupt returns -1)
/*
message Trigger {
    uint32 pin_to_follow = 1;
}
*/

// TODO cf this implementation w/ just uncommenting the follow_hardware_timing
// line above...
message Settings {
    oneof control {
        // TODO maybe replace this with another message that also includes
        // parameters for debouncing / denoising the digital input?
        // (if noise on that line actually seems like an issue)
        bool follow_hardware_timing = 1;
        PulseTiming timing = 2;
    }
    bool enable_timing_output = 3;
    // would need at least --experimental_allow_proto3_optional, and not sure
    // that would work + w/ nanopb
    //optional bool no_ack = 4;
    bool no_ack = 4;
}

// Not intending to use this outside of PinSequence, but the syntax seems
// simpler if I don't define it as a nested message (in *.options and the C++
// code).
message PinGroup {
    repeated uint32 pins = 1;
}

message PinSequence {
    repeated PinGroup pin_groups = 1;
}

// NOTE: this is only defined so we can let the Python protobuf library handle
// serialization / deserialization of multiple messages, without myself
// specifying how multiple JSON serializations should be combined / parsed into
// their respective message types.
// TODO TODO maybe this just means i should use a similar object for sending it
// all in one call to the Arduino? i'm not sure i have a great justification for
// current division...
message AllRequiredData {
    Settings settings = 1;
    PinSequence pin_sequence = 2;
}

// TODO should i add a "start" command, when PulseTiming is specified?
// (to maybe reduce variation depending on how long communication /
// deserialization of stuff takes on different targets?)
// TODO try the above start command w/ gRPC?

// TODO maybe add messages for feedback from arduino?
// ACKs? current state? version info / available pins? error state?
// maybe an enum to represent current state (READY/BUSY/ERROR[/PAUSED])?
// (currently doing the ACKs outside protobuf, just like the CRC)
// TODO or some type of keep alive handshake / message, so arduino can tell
// when host has disconnected?

// TODO something to represent delays between PulseTiming(s) (~ trials)?
// or not actually matter?

